.PHONY: help build up down restart logs clean test check-env

# Vari√°veis
COMPOSE_FILE = docker-compose.yml
CONTAINER_NAME = runtipi-telegram-runtipi
IMAGE_NAME = runtipi-telegram-runtipi

# Comando padr√£o
help: ## Mostra esta mensagem de ajuda
	@echo "ü§ñ Runtipi Telegram Bot - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Exemplos:"
	@echo "  make build    # Constr√≥i a imagem"
	@echo "  make up       # Inicia o bot"
	@echo "  make logs     # Visualiza logs"

check-env: ## Verifica se as vari√°veis de ambiente est√£o definidas
	@echo "üîç Verificando vari√°veis de ambiente..."
	@if [ -z "$$TELEGRAM_TOKEN" ]; then echo "‚ùå TELEGRAM_TOKEN n√£o definido"; exit 1; fi
	@if [ -z "$$TELEGRAM_CHAT_ID" ]; then echo "‚ùå TELEGRAM_CHAT_ID n√£o definido"; exit 1; fi
	@if [ -z "$$RUNTIPI_USERNAME" ]; then echo "‚ùå RUNTIPI_USERNAME n√£o definido"; exit 1; fi
	@if [ -z "$$RUNTIPI_PASSWORD" ]; then echo "‚ùå RUNTIPI_PASSWORD n√£o definido"; exit 1; fi
	@echo "‚úÖ Vari√°veis de ambiente OK"

build: ## Constr√≥i a imagem Docker
	@echo "üî® Construindo imagem Docker..."
	docker-compose build --no-cache

up: check-env ## Inicia o bot em background
	@echo "üöÄ Iniciando bot..."
	docker-compose up -d

down: ## Para o bot
	@echo "üõë Parando bot..."
	docker-compose down

restart: ## Reinicia o bot
	@echo "üîÑ Reiniciando bot..."
	docker-compose restart

logs: ## Mostra logs do bot
	@echo "üìã Logs do bot:"
	docker-compose logs -f --tail=100

logs-live: ## Mostra logs em tempo real
	@echo "üìã Logs em tempo real:"
	docker-compose logs -f

status: ## Mostra status do container
	@echo "üìä Status do container:"
	@docker ps -f name=$(CONTAINER_NAME) --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

clean: down ## Remove containers, volumes e imagens
	@echo "üßπ Limpando recursos Docker..."
	docker-compose down -v --rmi all --remove-orphans
	docker system prune -f

shell: ## Acessa shell do container
	@echo "üêö Acessando shell do container..."
	docker exec -it $(CONTAINER_NAME) /bin/bash

test-api: ## Testa conex√£o com API do Runtipi
	@echo "üß™ Testando conex√£o com API..."
	docker exec $(CONTAINER_NAME) python src/test_runtipi.py

update: ## Atualiza e reconstr√≥i o bot
	@echo "üîÑ Atualizando bot..."
	git pull
	$(MAKE) down
	$(MAKE) build
	$(MAKE) up

dev: ## Modo desenvolvimento com rebuild autom√°tico
	@echo "üîß Modo desenvolvimento..."
	docker-compose up --build

# Debug e troubleshooting
debug: ## Mostra informa√ß√µes de debug
	@echo "üêõ Informa√ß√µes de debug:"
	@docker ps -f name=$(CONTAINER_NAME)
	@echo ""
	@echo "Logs recentes:"
	@docker logs --tail=20 $(CONTAINER_NAME) 2>/dev/null || echo "Container n√£o encontrado"